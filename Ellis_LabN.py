import subprocess
import re
from dns import reversename, resolver
from pprint import pprint


# Class for handling all actions for strings and parsing and DNS
class MalwareStrings:

    def __init__(self):
        self.strings = []
        self.ips = []
        self.domains = []
        self.urls = []
        self.ip_reversed = []
        self.domains_res = []

    # Running strings command.
    def read_strings(self, filename):
        output = subprocess.run(['strings', filename], stdout=subprocess.PIPE)
        self.strings = output.stdout.decode("utf-8").splitlines()

    # Parse out IPs and Domains and URLs using regex
    def parse_strings(self):
        # IP regex
        ip = re.compile(r'(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)')

        # Domain Regex
        domain = re.compile(r'((?=[a-z0-9-]{1,63}\.)[a-z0-9]+(-[a-z0-9]+)*\.)+[a-z]{2,63}')

        # URL Regex 
        url = re.compile(r'(https?|ftp|file)://.+')

        # Go through each string checking regex. 
        for s in self.strings:
            one_ip = re.search(ip,s) 
            one_domain = re.search(domain,s)
            one_url = re.search(url, s)

            # If re.search hit a match, append to URL list
            if one_url:
                self.urls.append(one_url.group())

            
            # If re.search hit a match, append to ip list
            if one_ip:
                self.ips.append(one_ip.group())


            # If re.search hit a match, append to domain list
            if one_domain:
                domain_candidate = one_domain.group()

                # If exe or dll in result, it's not a domain. (Attempt to filter results)
                if ".exe" in domain_candidate or ".dll" in domain_candidate:
                    continue

                else:
                    self.domains.append(domain_candidate)

    # Reverse DNS lookup of IPs
    def reverse_dns(self, resolv):
        for i in self.ips:
            try:
                # Reversing the IP into .in-addr.arpa format.
                reverse = reversename.from_address(i)

                # Try to resolve with .in-addr.arpa domain name by examining PTR record
                reversed = resolv.query(reverse,"PTR")[0]
                self.ip_reversed.append(str(reversed)) 
            except:
                pass

    # DNS lookup of Domains
    def lookup_domains(self, resolv):
        for i in self.domains:
            try:
                self.domains_res.append(str(resolv.query(i, "A")[0]))
            except:
                pass

    
    # Output all results
    def output_all(self):
        print("All IPs Discovered. Results may vary:")
        pprint(self.ips)
        print("\nAll Domains Discovered. Results may vary:")
        pprint(self.domains)
        print("\nAll URLs Discovered. Results may vary:")
        pprint(self.urls)
        print("\nResults of reverse DNS lookup of IPs. Results may vary:")
        pprint(self.ip_reversed)
        print("\nResults of DNS lookup on Domains. Results may vary:")
        pprint(self.domains_res)
        print()



def main():

    # Set DNS servers for the script. Trying to get the best results.
    resolv = resolver.Resolver()
    resolv.nameservers = ['138.247.117.11','8.8.8.8', '8.8.4.4', '1.1.1.1']

    # Inistialize Class
    ns = MalwareStrings()
    
    # Run strings. Replace strings.txt with new file or break out into command line argument
    ns.read_strings('strings.txt')
    
    # Regex parse into IPs and Domains
    ns.parse_strings() 

    # Reverse DNS on IPs
    ns.reverse_dns(resolv)
    
    # DNS lookup on Domains
    ns.lookup_domains(resolv)
    
    # Output everything discovered
    ns.output_all()

if __name__ == "__main__":
    main()